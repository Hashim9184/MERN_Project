{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst Authenticate = require('../../../server/middleware/authenticate');\n\nrequire('../../../server/db/conn');\n\nconst User = require(\"../../../server/model/userSchema\");\n\nconst {\n  Mongoose\n} = require('mongoose');\n\nrouter.get('/', (req, res) => {\n  res.send(`Hello world from the server router js`);\n}); // Using Async and Await\n\nrouter.post('/register', async (req, res) => {\n  let token;\n  const {\n    fname,\n    lname,\n    username,\n    email,\n    phone,\n    password,\n    cpassword\n  } = req.body;\n\n  if (!fname || !lname || !username || !email || !phone || !password || !cpassword) {\n    return res.status(422).json({\n      error: `Fill all the field in the form properly!!`\n    });\n  }\n\n  try {\n    // Finding user has already registered with same Email or Username\n    const emailExist = await User.findOne({\n      email: email\n    });\n    const userExist = await User.findOne({\n      username: username\n    });\n\n    if (emailExist) {\n      return res.status(422).json({\n        error: \"Email already exists\"\n      });\n    }\n\n    if (userExist) {\n      return res.status(422).json({\n        error: \"Username already exists\"\n      });\n    }\n\n    const user = new User({\n      fname,\n      lname,\n      username,\n      email,\n      phone,\n      password,\n      cpassword\n    });\n    await user.save();\n    res.status(201).json({\n      message: `User registered succusfull`\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}); // login route\n\nrouter.post('/signin', async (req, res) => {\n  try {\n    const {\n      username,\n      email,\n      password\n    } = req.body;\n\n    if (!!email && !!username || !email && !username) {\n      return res.status(400).json({\n        error: \"Enter Username or Password correctly\"\n      });\n    }\n\n    if (!password) {\n      return res.status(400).json({\n        error: \"Fill all the details properly\"\n      });\n    }\n\n    const userLogin = await User.findOne(email ? {\n      email\n    } : {\n      username\n    });\n    console.log(userLogin);\n\n    if (userLogin) {\n      const isMatch = await bcrypt.compare(password, userLogin.password);\n      token = await userLogin.generateAuthToken();\n      console.log(token);\n      res.cookie(\"jwtoken\", token, {\n        expires: new Date(Date.now() + 25892000000),\n        httpOnly: true\n      });\n\n      if (!isMatch) {\n        res.status(400).json({\n          error: \"Invalid Credientials\"\n        });\n      } else {\n        res.json({\n          message: \"User Signin Successfully\"\n        });\n      }\n    } else {\n      res.status(400).json({\n        error: \"Invalid Credientials\"\n      });\n    }\n  } catch (err) {\n    console.log(err);\n  }\n});\nrouter.get('/getdata', Authenticate, (req, res) => {\n  console.log('Hello my contact');\n  res.send(req.rootUser);\n});\nrouter.get('/api', Authenticate, (req, res) => {\n  console.log('Hello my contact');\n  res.send(req.rootUser);\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/React Project/rebuilt/client/src/components/auth.js"],"names":["express","require","router","Router","bcrypt","jwt","Authenticate","User","Mongoose","get","req","res","send","post","token","fname","lname","username","email","phone","password","cpassword","body","status","json","error","emailExist","findOne","userExist","user","save","message","err","console","log","userLogin","isMatch","compare","generateAuthToken","cookie","expires","Date","now","httpOnly","rootUser","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst Authenticate = require('../../../server/middleware/authenticate')\r\n\r\nrequire('../../../server/db/conn');\r\nconst User = require(\"../../../server/model/userSchema\");\r\nconst { Mongoose } = require('mongoose');\r\n\r\n\r\nrouter.get('/', (req, res)=>{\r\n    res.send(`Hello world from the server router js`);\r\n});\r\n\r\n// Using Async and Await\r\n\r\nrouter.post('/register', async (req, res) =>{\r\n\r\n    let token;\r\n\r\n    const {fname, lname, username, email, phone, password, cpassword} =req.body;\r\n\r\n    if(!fname || !lname || !username || !email || !phone || !password || !cpassword){\r\n        return res.status(422).json({error: `Fill all the field in the form properly!!`});\r\n    }\r\n\r\n        try{\r\n// Finding user has already registered with same Email or Username\r\n\r\n const emailExist = await User.findOne({email:email});\r\n const userExist = await User.findOne({username:username});\r\n\r\n if(emailExist){\r\n    return res.status(422).json({error: \"Email already exists\"});\r\n }\r\n if(userExist){\r\n    return res.status(422).json({error: \"Username already exists\"});\r\n }\r\n\r\n const user = new User({fname, lname, username, email, phone, password, cpassword});\r\n \r\n\r\n await user.save();\r\n\r\n res.status(201).json({message: `User registered succusfull`});\r\n\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n\r\n});\r\n\r\n// login route\r\n\r\nrouter.post('/signin', async (req, res) =>{\r\n    try{\r\n        const {username, email, password} = req.body;\r\n\r\n        if((!!email && !!username) || (!email && !username)) {\r\n            return res.status(400).json({error: \"Enter Username or Password correctly\"})\r\n        }\r\n        if (!password) {\r\n            return res.status(400).json({error: \"Fill all the details properly\"})\r\n        }\r\n\r\n        const userLogin = await User.findOne(email ? { email } : { username })\r\n        console.log(userLogin);\r\n\r\n        if(userLogin){\r\n            const isMatch = await bcrypt.compare(password, userLogin.password)\r\n\r\n            token = await userLogin.generateAuthToken();\r\n            console.log(token);\r\n\r\n            res.cookie(\"jwtoken\", token, {\r\n                expires: new Date(Date.now() + 25892000000),\r\n                httpOnly: true\r\n            })\r\n\r\n            if(!isMatch){\r\n                res.status(400).json({error: \"Invalid Credientials\"})\r\n            }else{\r\n                res.json({message: \"User Signin Successfully\"})\r\n            }\r\n        }else{\r\n            res.status(400).json({error: \"Invalid Credientials\"})\r\n        }\r\n\r\n      \r\n    }catch(err){\r\n        console.log(err)\r\n    }\r\n\r\n})\r\n\r\n\r\nrouter.get('/getdata', Authenticate, (req, res) =>{\r\n    console.log('Hello my contact');\r\n    res.send(req.rootUser);\r\n})\r\n\r\nrouter.get('/api', Authenticate, (req, res)=>{\r\n    console.log('Hello my contact');\r\n    res.send(req.rootUser);\r\n    });\r\nmodule.exports = router;"]},"metadata":{},"sourceType":"module"}